// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

interface   ITestInterface {
    function helloWorld() external view returns (string memory);
    
    function Popcorn() external view returns (string memory);

}

contract HelloWorld {
    string private _text;
//    address public owner;

    constructor() {
        _text = pureText();
    }

    function helloWorld() public view returns (string memory) {
        return _text;
    }

    function setText(string calldata newText) public {
        _text = newText;
    }

   function pureText() public pure returns (string memory) {
        return "Hello World";
    }

    function _isPure() internal view returns (bool check_) {
        check_ = keccak256(bytes(_text)) == keccak256(bytes(pureText()));        
    }

    function isPure() public view returns (bool returnValue_) {
        returnValue_ = _isPure();
    }

    function _restore() internal {
    }
     
    modifier onlyWhenNotPure () {
        require(!isPure(), "The Text is already pure!! Save your money!");
        _;
    }

    function sample() public view returns (address) {
        return msg.sender;
    }
}
